import disnake
from disnake.ext import commands
from collections import Counter
import json
import os

class ServerReactionTop(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.config_path = os.path.join(self.base_path, "conf/config.json")
        self.data_path = os.path.join(self.base_path, "data/reaction_data.json")
        with open(self.config_path, 'r') as f:
            self.config = json.load(f)
        self.reaction_data = self.load_reaction_data()
        self.save_reaction_data()

    def load_reaction_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"""
        if os.path.exists(self.data_path):
            try:
                with open(self.data_path, "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                print("–§–∞–π–ª reaction_data.json –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
                return {}
        return {}

    def save_reaction_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º –≤ —Ñ–∞–π–ª"""
        with open(self.data_path, "w") as f:
            json.dump(self.reaction_data, f)

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction: disnake.Reaction, user: disnake.User):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥–∞–Ω–Ω—ã–µ"""
        if user.bot:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        
        user_id = str(user.id)
        if user_id not in self.reaction_data:
            self.reaction_data[user_id] = 0
        self.reaction_data[user_id] += 1

        self.save_reaction_data()

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º.")
    async def reaction_leaderboard(self, inter: disnake.ApplicationCommandInteraction):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–∫—Ü–∏–π"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–∫—Ü–∏–π
        sorted_users = sorted(self.reaction_data.items(), key=lambda x: x[1], reverse=True)
        top_users = sorted_users[:10]
        
        embed = disnake.Embed(
            title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º",
            description=f"–¢–æ–ø-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ {disnake.utils.format_dt(disnake.utils.utcnow(), 'D')}",
            color=disnake.Color.gold()
        )

        embed.set_image(url=self.config["REACTION_TOP_IMAGE"])

        if top_users:
            for idx, (user_id, reactions) in enumerate(top_users, start=1):
                user = await self.bot.fetch_user(user_id)
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º, –ø–∏–Ω–≥–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∞–∫—Ü–∏–π
                embed.add_field(
                    name=f"{idx}. {user.display_name}",
                    value=f"{user.mention} - –†–µ–∞–∫—Ü–∏–π: {reactions} ",
                    inline=False
                )
        else:
            embed.add_field(
                name="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                value="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏–∏.",
                inline=False
            )

        embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
        await inter.send(embed=embed)

def setup(bot):
    bot.add_cog(ServerReactionTop(bot))
