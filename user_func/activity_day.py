import disnake
from disnake.ext import commands, tasks
from datetime import datetime, time
import json
import os

class ServerActivity(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.daily_message_count = self.load_activity_data()
        self.reset_daily_activity.start()  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö

    def load_activity_data(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ activity_day.json –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        if os.path.exists("data/activity_day.json"):
            try:
                with open("data/activity_day.json", "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
                print("–§–∞–π–ª activity_day.json –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
                return {}
        return {}

    def save_activity_data(self):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª activity_day.json
        with open("data/activity_day.json", "w") as f:
            json.dump(self.daily_message_count, f)

    @commands.Cog.listener()
    async def on_message(self, message: disnake.Message):
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –±–æ—Ç–æ–≤
        if message.author == self.bot.user or message.author.bot:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        today = datetime.now().strftime('%Y-%m-%d')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        if today not in self.daily_message_count:
            self.daily_message_count[today] = {}

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.author.id)
        if user_id not in self.daily_message_count[today]:
            self.daily_message_count[today][user_id] = 0
        self.daily_message_count[today][user_id] += 1

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        self.save_activity_data()

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.")
    async def activity_day_leaderboard(self, inter: disnake.ApplicationCommandInteraction):
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open("conf/config.json", "r") as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        if today not in self.daily_message_count or not self.daily_message_count[today]:
            await inter.send("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", ephemeral=True)
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        sorted_users = sorted(
            self.daily_message_count[today].items(),
            key=lambda item: item[1],
            reverse=True
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–æ —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        top_10_users = sorted_users[:10]

        # –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø-10
        embed = disnake.Embed(
            title="üèÜ –¢–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å",
            description=f"–î–∞—Ç–∞: {today}",
            color=disnake.Color.gold()
        )

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–º—ë–Ω –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        for index, (user_id, message_count) in enumerate(top_10_users, start=1):
            user = await self.bot.fetch_user(int(user_id))
            mention = f"<@{user_id}>"
            embed.add_field(
                name=f"{index}. {user.display_name}",
                value=f"{mention} ‚Äî –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}",
                inline=False
            )

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è embed –∏–∑ config.json
        embed.set_image(url=config["ACTIVITY_DAY_IMAGE"])

        embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
        await inter.send(embed=embed)

    @tasks.loop(time=time(0, 0))
    async def reset_daily_activity(self):
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–Ω–æ—á—å
        self.daily_message_count = {}
        self.save_activity_data()
        print("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 00:00.")

    @reset_daily_activity.before_loop
    async def before_reset(self):
        await self.bot.wait_until_ready()

def setup(bot):
    bot.add_cog(ServerActivity(bot))
