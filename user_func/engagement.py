import disnake
from disnake.ext import commands
from datetime import datetime, timedelta
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import json  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–∞–º–∏

class ServerEngagement(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.engagement_data = self.load_engagement_data()
        self.save_engagement_data()
        with open("conf/config.json", "r") as f:
            self.config = json.load(f)

    def load_engagement_data(self):
        if os.path.exists("data/engagement_data.json"):
            try:
                with open("data/engagement_data.json", "r") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                print("–§–∞–π–ª engagement_data.json –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
                return {}
        return {
            'messages_sent': 0,
            'polls_created': 0,
            'poll_participants': 0,
            'reactions_sent': 0,
            'new_members': 0
        }

    def save_engagement_data(self):
        with open("data/engagement_data.json", "w") as f:
            json.dump(self.engagement_data, f)

    @commands.Cog.listener()
    async def on_message(self, message: disnake.Message):
        if message.author == self.bot.user or message.author.bot:
            return
        
        self.engagement_data['messages_sent'] += 1
        
        # –ü—Ä–∏–≤–æ–¥–∏–º datetime.now() –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ UTC
        utc_now = datetime.now(pytz.utc)

        self.save_engagement_data()

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction: disnake.Reaction, user: disnake.User):
        if user == self.bot.user:
            return

        self.engagement_data['reactions_sent'] += 1
        self.save_engagement_data()

    @commands.Cog.listener()
    async def on_member_join(self, member: disnake.Member):
        if member.joined_at and datetime.now(pytz.utc) - member.joined_at <= timedelta(days=30):
            self.engagement_data['new_members'] += 1
        self.save_engagement_data()

    @commands.Cog.listener()
    async def on_poll_create(self, poll):  
        self.engagement_data['polls_created'] += 1
        self.save_engagement_data()

    @commands.Cog.listener()
    async def on_poll_participation(self, participant):  
        self.engagement_data['poll_participants'] += 1
        self.save_engagement_data()

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.")
    async def engagement(self, inter: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(
            title="üìä –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞",
            description=f"–î–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ {datetime.now().strftime('%Y-%m-%d')}",
            color=disnake.Color.gold()
        )

        embed.set_image(url=self.config["ENGAGEMENT_IMAGE"])

        embed.add_field(
            name="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è",
            value=f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.engagement_data['messages_sent']}",
            inline=False
        )
        embed.add_field(
            name="üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {self.engagement_data['polls_created']}",
            inline=False
        )
        embed.add_field(
            name="üôã‚Äç‚ôÇÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤",
            value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–æ—Å–æ–≤: {self.engagement_data['poll_participants']}",
            inline=False
        )
        embed.add_field(
            name="‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏",
            value=f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π: {self.engagement_data['reactions_sent']}",
            inline=False
        )
        embed.add_field(
            name="üÜï –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü",
            value=f"–ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {self.engagement_data['new_members']}",
            inline=False
        )

        if self.engagement_data['messages_sent'] > 0:
            avg_messages_per_day = self.engagement_data['messages_sent'] / (datetime.now().day)
            embed.add_field(
                name="üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å",
                value=f"{avg_messages_per_day:.2f}",
                inline=False
            )

        embed.set_footer(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
        await inter.send(embed=embed)

def setup(bot):
    bot.add_cog(ServerEngagement(bot))
