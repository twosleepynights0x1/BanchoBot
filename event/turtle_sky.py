import disnake
from disnake.ext import commands, tasks
from datetime import datetime, time, timedelta
import logging
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

class TurtleEvent(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ —Ä–æ–ª–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
        self.config = self.load_config()
        self.channel_id = self.config["channel_id"]
        self.role_id = self.config["role_id"]
        self.image_url = "https://i.pinimg.com/736x/5b/4f/af/5b4faf4e54af4df1c1f636ebe1c9cf03.jpg"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.event_schedule = self.get_event_schedule()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.last_event_time = None  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è

        self.check_event.start()  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        config_path = os.path.join("data", "event_sky.json")
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logging.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"channel_id": 0, "role_id": 0}
        except json.JSONDecodeError:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path}")
            return {"channel_id": 0, "role_id": 0}

    def get_event_schedule(self):
        """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)."""
        summer_time = [
            time(10, 45), time(12, 45), time(14, 45), time(16, 45), time(18, 45),
            time(20, 45), time(22, 45), time(0, 45), time(2, 45), time(4, 45),
            time(6, 45), time(8, 45)
        ]
        winter_time = [
            time(11, 45), time(13, 45), time(15, 45), time(17, 45), time(19, 45),
            time(21, 45), time(23, 45), time(1, 45), time(3, 45), time(5, 45),
            time(7, 45), time(9, 45)
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –≥–æ–¥–∞
        now = datetime.now()
        if (3, 15) <= (now.month, now.day) <= (11, 15):  # –õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è
            return summer_time
        else:  # –ó–∏–º–Ω–µ–µ –≤—Ä–µ–º—è
            return winter_time

    @tasks.loop(seconds=30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    async def check_event(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π."""
        now = datetime.now()  # –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        current_time = now.time().replace(second=0, microsecond=0)

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
        if self.last_event_time == current_time:
            return

        if current_time in self.event_schedule:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            self.last_event_time = current_time

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            channel = self.bot.get_channel(self.channel_id)
            if channel:
                role_ping = f"<@&{self.role_id}>"

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–∞–ª—å–Ω–æ–µ)
                event_start = datetime.combine(now.date(), current_time)

                # –î–æ–±–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç–º–±–µ–¥–¥–µ
                event_start_plus_5 = event_start + timedelta(minutes=5)

                embed = disnake.Embed(
                    title="‚Å£ üê¢ **–°–æ–±—ã—Ç–∏–µ —Å —á–µ—Ä–µ–ø–∞—Ö–æ–π —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!**",
                    description="–í–∞—Å –∂–¥–µ—Ç —Å–±–æ—Ä –¥–∏–∫–æ–≤–∏–Ω–Ω—ã—Ö —Ä–∞–∫—É—à–µ–∫ –≤ –∑–∞–∫–∞—Ç–Ω—ã—Ö –ª—É—á–∞—Ö –û—Å—Ç—Ä–æ–≤–æ–≤ —É–∫—Ä—ã—Ç–∏—è. –¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –≤–æ—Å–∫–∞!",
                    color=disnake.Color.from_rgb(255, 182, 193)
                )
                embed.add_field(
                    name="üìÖ –ù–∞—á–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    value=f"{event_start_plus_5.strftime('%H:%M')}",  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 5 –º–∏–Ω—É—Ç –ø–æ–∑–∂–µ
                    inline=False
                )
                embed.add_field(
                    name="‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    value="10 –º–∏–Ω—É—Ç",
                    inline=False
                )
                embed.set_image(url=self.image_url)
                embed.set_footer(text=f"Sky CotL")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º —Ä–æ–ª–∏ –∏ embed'–æ–º
                await channel.send(content=role_ping, embed=embed)

    @check_event.before_loop
    async def before_check_event(self):
        """–ñ–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ü–∏–∫–ª–∞."""
        await self.bot.wait_until_ready()


def setup(bot: commands.Bot):
    bot.add_cog(TurtleEvent(bot))
