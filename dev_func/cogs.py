import disnake
from disnake.ext import commands
from pathlib import Path
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('conf/config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)
#1

class DevCogManager(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def _handle_cog(self, inter: disnake.ApplicationCommandInteraction, action: str, cog: str):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not any(role.id in config["ADMIN"] for role in inter.author.roles):
            await inter.response.send_message(
                embed=disnake.Embed(
                    title="üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. "
                                "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                    color=disnake.Color.red(),
                ),
                ephemeral=True,
            )
            return

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–≥–æ–≤
        directories = [
            "admin_func",
            "dev_func",
            "event",
            "news",
            "server_func",
            "user_func",
        ]

        cog_path = None
        # –ü–æ–∏—Å–∫ –∫–æ–≥–æ–≤ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        for directory in directories:
            potential_path = f"{directory}.{cog}"
            if action != "load" and potential_path in self.bot.extensions:
                cog_path = potential_path
                break
            elif action == "load" and Path(f"{directory}/{cog}.py").exists():
                cog_path = potential_path
                break

        # –ï—Å–ª–∏ –∫–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        if cog_path is None:
            await inter.response.send_message(
                embed=disnake.Embed(
                    title="‚ùå –ö–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ö–æ–≥ **{cog}** –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:\n\n"
                                + "\n".join(f"`{d}`" for d in directories),
                    color=disnake.Color.red(),
                )
            )
            return

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
        try:
            if action == "load":
                self.bot.load_extension(cog_path)
                result = f"–ö–æ–≥ **`{cog_path}`** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω."
                color = disnake.Color.green()
                icon = "‚úÖ"
            elif action == "unload":
                self.bot.unload_extension(cog_path)
                result = f"–ö–æ–≥ **`{cog_path}`** —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω."
                color = disnake.Color.orange()
                icon = "üüß"
            elif action == "reload":
                self.bot.reload_extension(cog_path)
                result = f"–ö–æ–≥ **`{cog_path}`** —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω."
                color = disnake.Color.blurple()
                icon = "üîÑ"
        except Exception as e:
            result = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–≥–æ–º **`{cog_path}`**:\n```{e}```"
            color = disnake.Color.red()
            icon = "‚ùå"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        embed = disnake.Embed(
            title=f"{icon} –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {action.capitalize()} Cog",
            description=result,
            color=color,
        )
        embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value=f"`{action.capitalize()}`", inline=True)
        embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫o–≥–∞", value=f"`{cog}`", inline=True)
        if action == "load":
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ö–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.", inline=False)
        elif action == "unload":
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ö–æ–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", inline=False)
        elif action == "reload":
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ö–æ–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.", inline=False)
        else:
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", inline=False)

        embed.set_footer(text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {inter.author}", icon_url=inter.author.display_avatar.url)

        await inter.response.send_message(embed=embed)

    @commands.slash_command()
    async def core(
        self,
        inter: disnake.ApplicationCommandInteraction,
        action: str = commands.Param(choices=["load", "unload", "reload"]),
        cog: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–≥ —Ñ–∞–π–ª–∞ (–±–µ–∑ .py)"),
    ):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–≥–∞–º–∏ (–∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–≥—Ä—É–∑–∫–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞).
        –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """
        await self._handle_cog(inter, action, cog)


def setup(bot):
    bot.add_cog(DevCogManager(bot))
